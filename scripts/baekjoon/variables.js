/* 백준 허브의 전역 변수 선언 파일입니다. */
/* 포함된 변수는 다음과 같습니다. 
    languages: 백준의 언어 및 그에 맞는 file extension
    bj_level: Solved.ac의 레벨별 매핑입니다. API 호출 시 0~31까지의 번호로 레벨이 표현되는데 이를 문자열로 매핑하였습니다.
    categories: Solved.ac의 문제 카테로기를 한글 번역본으로 매핑하는 역할을 합니다.
    CommitType: uploadGit에 사용되는 enum으로 readme 혹은 code를 업로드할 때 사용됩니다.
    titleRegex: 제목 형식의 regex 정의입니다.
    uploadState: 현재 업로드 중인지를 저장하는 boolean입니다.
    bojData: 깃허브에 업로드되는 사용자의 코드와 문제 요약을 담고 있습니다.
*/

// prettier-ignore
// Languages supported by BOJ
/* let */ const languages = {
    "아희": "aheui",
    "엄준식": "umm",
    "Ada": "ada",
    "Algol 68": "a",
    "APECODE": "ape",
    "Assembly": "o",
    "Assembly (32bit)": "o",
    "Assembly (64bit)": "o",
    "awk": "awk",
    "Bash": "sh",
    "bc": "bc",
    "Befunge": "bf",
    "Boo": "boo",
    "Brainf**k": "bf",
    "C": "c",
    "C#": "cs",
    "C# 3.0 (Mono)": "cs",
    "C# 6.0 (Mono)": "cs",
    "C# 9.0 (.NET)": "cs",
    "C++": "cc",
    "C++11": "cc",
    "C++11 (Clang)": "cc",
    "C++14": "cc",
    "C++14 (Clang)": "cc",
    "C++17": "cc",
    "C++17 (Clang)": "cc",
    "C++20": "cc",
    "C++20 (Clang)": "cc",
    "C++98": "cc",
    "C++98 (Clang)": "cc",
    "C11": "c",
    "C11 (Clang)": "c",
    "C2x": "c",
    "C2x (Clang)": "c",
    "C90": "c",
    "C90 (Clang)": "c",
    "C99": "c",
    "C99 (Clang)": "c",
    "Cobol": "cob",
    "Cobra": "cobra",
    "Coq": "v",
    "Crystal": "cr",
    "D": "d",
    "D (LDC)": "d",
    "F#": "fs",
    "F# (.NET)": "fs",
    "F# (Mono)": "fs",
    "Fortran": "f",
    "FreeBASIC": "bas",
    "Go": "go",
    "Go (gccgo)": "go",
    "Golfscript": "gs",
    "Haskell": "hs",
    "Haxe": "py",
    "INTERCAL": "i",
    "Java": "java",
    "Java 11": "java",
    "Java 15": "java",
    "Java 8": "java",
    "Java 8 (OpenJDK)": "java",
    "Kotlin": "kt",
    "Kotlin (JVM)": "kt",
    "Kotlin (Native)": "kt",
    "LOLCODE": "lol",
    "Lua": "lua",
    "Minecraft": "mca",
    "Nemerle": "n",
    "Nimrod": "nim",
    "node.js": "js",
    "Objective-C": "m",
    "Objective-C++": "mm",
    "OCaml": "ml",
    "Pascal": "pas",
    "Perl": "pl",
    "PHP": "php",
    "Pike": "pike",
    "PyPy": "py",
    "PyPy2": "py",
    "PyPy3": "py",
    "Python": "py",
    "Python 2": "py",
    "Python 3": "py",
    "Rhino": "js",
    "Ruby": "rb",
    "Ruby 1.8": "rb",
    "Ruby 1.9": "rb",
    "Ruby 2": "rb",
    "Rust": "rs",
    "Rust 2015": "rs",
    "Rust 2018": "rs",
    "Rust 2019": "rs",
    "Rust 2021": "rs",
    "Scala": "scala",
    "Scheme": "scm",
    "sed": "sed",
    "Swift": "swift",
    "SystemVerilog": "sv",
    "Tcl": "tcl",
    "Text": "txt",
    "TypeScript": "ts",
    "VB.NET 2.0 (Mono)": "vb",
    "VB.NET 4.0 (Mono)": "vb",
    "Visual Basic": "vb",
    "Visual Basic (.NET)": "vb",
    "Whitespace": "ws"
}

// // If a new language is added, perform the update manually using the script below.
// // parsing all languages on https://help.acmicpc.net/language/info/all
// [...document.querySelectorAll('div.card')]
//   .map((x) => [x.querySelector('header > h3'), x.querySelector('ul > li:nth-child(2) > code')])
//   .filter((x) => !!x[0] && !!x[1])
//   .map((x) => x.map((el) => el.innerText))
//   .map((x) => [x[0].trim(), x[1].match(/Main\.(?!exe)(?!jar)([a-zA-Z]+)/)])
//   .filter((x) => !!x[0] && !!x[1])
//   .sort((a, b) => a[0].localeCompare(b[0]))
//   .forEach((x) => (languages[x[0]] = x[1][1]));
// languages['Coq'] = 'v';
// // sort languages by key
// languages = Object.entries(languages)
//   .sort((a, b) => a[0].localeCompare(b[0]))
//   .reduce((acc, cur) => {
//     acc[cur[0]] = cur[1];
//     return acc;
//   }, {});
// // get length of languages
// console.log("languages length: ", Object.keys(languages).length);
// console.log("languages: ", languages);

// BOJ Levels
const bj_level = {
  0: 'Unrated',
  1: 'Bronze V',
  2: 'Bronze IV',
  3: 'Bronze III',
  4: 'Bronze II',
  5: 'Bronze I',
  6: 'Silver V',
  7: 'Silver IV',
  8: 'Silver III',
  9: 'Silver II',
  10: 'Silver I',
  11: 'Gold V',
  12: 'Gold IV',
  13: 'Gold III',
  14: 'Gold II',
  15: 'Gold I',
  16: 'Platinum V',
  17: 'Platinum IV',
  18: 'Platinum III',
  19: 'Platinum II',
  20: 'Platinum I',
  21: 'Diamond V',
  22: 'Diamond IV',
  23: 'Diamond III',
  24: 'Diamond II',
  25: 'Diamond I',
  26: 'Ruby V',
  27: 'Ruby IV',
  28: 'Ruby III',
  29: 'Ruby II',
  30: 'Ruby I',
  31: 'Master',
};

// prettier-ignore
/* let */ const categories = {
  "0-1 너비 우선 탐색": "0_1_bfs",
  "2-sat": "2_sat",
  "a*": "a_star",
  "애드 혹": "ad_hoc",
  "아호-코라식": "aho_corasick",
  "Aliens 트릭": "alien",
  "임의 정밀도 / 큰 수 연산": "arbitrary_precision",
  "사칙연산": "arithmetic",
  "단절점과 단절선": "articulation",
  "백트래킹": "backtracking",
  "베이즈 정리": "bayes",
  "벨만–포드": "bellman_ford",
  "벌래캠프–매시": "berlekamp_massey",
  "너비 우선 탐색": "bfs",
  "이중 연결 요소": "biconnected_component",
  "양방향 탐색": "bidirectional_search",
  "이분 탐색": "binary_search",
  "이분 그래프": "bipartite_graph",
  "이분 매칭": "bipartite_matching",
  "비트마스킹": "bitmask",
  "비트 집합": "bitset",
  "브루트포스 알고리즘": "bruteforcing",
  "번사이드 보조정리": "burnside",
  "선인장": "cactus",
  "미적분학": "calculus",
  "많은 조건 분기": "case_work",
  "centroid": "centroid",
  "센트로이드 분할": "centroid_decomposition",
  "chordal graph": "chordal_graph",
  "볼록 껍질을 이용한 최적화": "cht",
  "서큘레이션": "circulation",
  "조합론": "combinatorics",
  "구성적": "constructive",
  "볼록 껍질": "convex_hull",
  "값 / 좌표 압축": "coordinate_compression",
  "중국인의 나머지 정리": "crt",
  "춤추는 링크": "dancing_links",
  "자료 구조": "data_structures",
  "차수열": "degree_sequence",
  "델로네 삼각분할": "delaunay",
  "덱": "deque",
  "깊이 우선 탐색": "dfs",
  "차분 공격": "differential_cryptanalysis",
  "다익스트라": "dijkstra",
  "유향 최소 신장 트리": "directed_mst",
  "이산 k제곱근": "discrete_kth_root",
  "이산 로그": "discrete_log",
  "이산 제곱근": "discrete_sqrt",
  "분리 집합": "disjoint_set",
  "분할 정복": "divide_and_conquer",
  "분할 정복을 사용한 최적화": "divide_and_conquer_optimization",
  "도미네이터 트리": "dominator_tree",
  "다이나믹 프로그래밍": "dp",
  "비트필드를 이용한 다이나믹 프로그래밍": "dp_bitfield",
  "커넥션 프로파일을 이용한 다이나믹 프로그래밍": "dp_connection_profile",
  "덱을 이용한 다이나믹 프로그래밍": "dp_deque",
  "트리에서의 다이나믹 프로그래밍": "dp_tree",
  "쌍대 그래프": "dual_graph",
  "쌍대성": "duality",
  "유클리드 호제법": "euclidean",
  "오일러 지표 (χ=V-E+F)": "euler_characteristic",
  "오일러 피 함수": "euler_phi",
  "오일러 경로 테크닉": "euler_tour_technique",
  "오일러 경로": "eulerian_path",
  "분할 정복을 이용한 거듭제곱": "exponentiation_by_squaring",
  "확장 유클리드 호제법": "extended_euclidean",
  "고속 푸리에 변환": "fft",
  "최대 유량": "flow",
  "플로이드–와샬": "floyd_warshall",
  "페르마의 소정리": "flt",
  "게임 이론": "game_theory",
  "가우스 소거법": "gaussian_elimination",
  "일반적인 매칭": "general_matching",
  "생성 함수": "generating_function",
  "기하학": "geometry",
  "3차원 기하학": "geometry_3d",
  "4차원 이상의 기하학": "geometry_hyper",
  "그래프 탐색": "graph_traversal",
  "그래프 이론": "graphs",
  "그리디 알고리즘": "greedy",
  "그린 정리": "green",
  "반평면 교집합": "half_plane_intersection",
  "홀의 결혼 정리": "hall",
  "해시를 사용한 집합과 맵": "hash_set",
  "해싱": "hashing",
  "휴리스틱": "heuristics",
  "히르쉬버그": "hirschberg",
  "Heavy-light 분할": "hld",
  "헝가리안": "hungarian",
  "구현": "implementation",
  "포함 배제의 원리": "inclusion_and_exclusion",
  "인터프리터": "interpreter",
  "키타마사": "kitamasa",
  "KMP": "kmp",
  "배낭 문제": "knapsack",
  "크누스 최적화": "knuth",
  "크누스 X": "knuth_x",
  "느리게 갱신되는 세그먼트 트리": "lazyprop",
  "최소 공통 조상": "lca",
  "선분 교차 판정": "line_intersection",
  "선형대수학": "linear_algebra",
  "선형 계획법": "linear_programming",
  "기댓값의 선형성": "linearity_of_expectation",
  "링크/컷 트리": "link_cut_tree",
  "연결 리스트": "linked_list",
  "가장 긴 증가하는 부분 수열: O(n log n)": "lis",
  "뤼카 정리": "lucas",
  "보이어–무어 다수결 투표": "majority_vote",
  "매내처": "manacher",
  "수학": "math",
  "매트로이드": "matroid",
  "최소 비용 최대 유량": "mcmf",
  "머지 소트 트리": "merge_sort_tree",
  "최대 유량 최소 컷 정리": "mfmc",
  "밀러–라빈 소수 판별법": "miller_rabin",
  "최소 외접원": "min_enclosing_circle",
  "중간에서 만나기": "mitm",
  "mo's": "mo",
  "뫼비우스 반전 공식": "mobius_inversion",
  "모듈로 곱셈 역원": "modular_multiplicative_inverse",
  "단조 큐를 이용한 최적화": "monotone_queue_optimization",
  "최소 스패닝 트리": "mst",
  "다차원 세그먼트 트리": "multi_segtree",
  "다중 대입값 계산": "multipoint_evaluation",
  "정수론": "number_theory",
  "수치해석": "numerical_analysis",
  "오프라인 동적 연결성 판정": "offline_dynamic_connectivity",
  "오프라인 쿼리": "offline_queries",
  "회문 트리": "palindrome_tree",
  "매개 변수 탐색": "parametric_search",
  "파싱": "parsing",
  "병렬 이분 탐색": "pbs",
  "순열 사이클 분할": "permutation_cycle_decomposition",
  "물리학": "physics",
  "픽의 정리": "pick",
  "비둘기집 원리": "pigeonhole_principle",
  "평면 그래프": "planar_graph",
  "볼록 다각형 내부의 점 판정": "point_in_convex_polygon",
  "오목 다각형 내부의 점 판정": "point_in_non_convex_polygon",
  "폴라드 로": "pollard_rho",
  "다각형의 넓이": "polygon_area",
  "런타임 전의 전처리": "precomputation",
  "누적 합": "prefix_sum",
  "소수 판정": "primality_test",
  "우선순위 큐": "priority_queue",
  "확률론": "probability",
  "퍼시스턴트 세그먼트 트리": "pst",
  "피타고라스 정리": "pythagoras",
  "큐": "queue",
  "라빈–카프": "rabin_karp",
  "무작위화": "randomization",
  "레드-블랙 트리": "rb_tree",
  "재귀": "recursion",
  "정규 표현식": "regex",
  "로프": "rope",
  "회전하는 캘리퍼스": "rotating_calipers",
  "강한 연결 요소": "scc",
  "세그먼트 트리": "segtree",
  "에라토스테네스의 체": "sieve",
  "담금질 기법": "simulated_annealing",
  "시뮬레이션": "simulation",
  "슬라이딩 윈도우": "sliding_window",
  "함수 개형을 이용한 최적화": "slope_trick",
  "작은 집합에서 큰 집합으로 합치는 테크닉": "smaller_to_larger",
  "정렬": "sorting",
  "희소 배열": "sparse_table",
  "스플레이 트리": "splay_tree",
  "스프라그–그런디 정리": "sprague_grundy",
  "제곱근 분할법": "sqrt_decomposition",
  "안정 결혼 문제": "stable_marriage",
  "스택": "stack",
  "통계학": "statistics",
  "스토어–바그너": "stoer_wagner",
  "문자열": "string",
  "접미사 배열과 LCP 배열": "suffix_array",
  "접미사 트리": "suffix_tree",
  "스위핑": "sweeping",
  "삼분 탐색": "ternary_search",
  "탑 트리": "top_tree",
  "위상 정렬": "topological_sorting",
  "트리 압축": "tree_compression",
  "트리 동형 사상": "tree_isomorphism",
  "트리를 사용한 집합과 맵": "tree_set",
  "트리": "trees",
  "트라이": "trie",
  "외판원 순회 문제": "tsp",
  "두 포인터": "two_pointer",
  "utf-8 입력 처리": "utf8",
  "보로노이 다이어그램": "voronoi",
  "z": "z",
};

// // request "https://solved.ac/api/v3/tag/list"
// fetch('https://solved.ac/api/v3/tag/list')
//   .then((response) => response.json())
//   .then((data) => data.items)
//   .then((items) =>
//     items.map((item) => {
//       const { key } = item;
//       const { name } = item.displayNames[0];
//       return { key, name };
//     }),
//   )
//   .then((items) => items.forEach((item) => (categories[item.key] = item.name)));

// // sort categories by key.
// categories = Object.entries(categories)
//   .sort((a, b) => a[0].localeCompare(b[0]))
//   .reduce((acc, cur) => {
//     acc[cur[0]] = cur[1];
//     return acc;
//   }, {});

// // get length of categories
// console.log('categories length: ', Object.keys(categories).length);
// console.log('categories: ', categories);

/* 채점 결과에 대한 각 구분 정보 */
const RESULT_CATEGORY = {
  RESULT_PENDING: 'wait',
  RESULT_PENDING_REJUDGE: 'rejudge-wait',
  RESULT_NO_JUDGE: 'no-judge',
  RESULT_PREPARE_FOR_JUDGE: 'compile',
  RESULT_JUDGING: 'judging',
  RESULT_ACCEPTED: 'ac',
  RESULT_PARTIALLY_ACCEPTED: 'pac',
  RESULT_PRESENTATION_ERROR: 'pe',
  RESULT_WRONG_ANSWER: 'wa',
  RESULT_ACCEPTED_NOT_CORRECT: 'awa',
  RESULT_TIME_LIMIT_EXCEEDED: 'tle',
  RESULT_MEMORY_LIMIT_EXCEEDED: 'mle',
  RESULT_OUTPUT_LIMIT_EXCEEDED: 'ole',
  RESULT_RUNTIME_ERROR: 'rte',
  RESULT_COMPILATION_ERROR: 'ce',
  RESULT_UNVAILABLE: 'co',
  RESULT_DELETED: 'del',
};

/* 채점 결과에 대한 각 메시지 구분 맵핑 */
const RESULT_MESSAGE = {
  [RESULT_CATEGORY.RESULT_PENDING]: '기다리는 중',
  [RESULT_CATEGORY.RESULT_PENDING_REJUDGE]: '재채점을 기다리는 중',
  [RESULT_CATEGORY.RESULT_NO_JUDGE]: '채점하지 않음',
  [RESULT_CATEGORY.RESULT_PREPARE_FOR_JUDGE]: '채점 준비 중',
  [RESULT_CATEGORY.RESULT_JUDGING]: '채점 중',
  [RESULT_CATEGORY.RESULT_ACCEPTED]: '맞았습니다!!',
  [RESULT_CATEGORY.RESULT_PARTIALLY_ACCEPTED]: '맞았습니다!!',
  [RESULT_CATEGORY.RESULT_PRESENTATION_ERROR]: '출력 형식이 잘못되었습니다',
  [RESULT_CATEGORY.RESULT_WRONG_ANSWER]: '틀렸습니다',
  [RESULT_CATEGORY.RESULT_ACCEPTED_NOT_CORRECT]: '!맞았습니다',
  [RESULT_CATEGORY.RESULT_TIME_LIMIT_EXCEEDED]: '시간 초과',
  [RESULT_CATEGORY.RESULT_MEMORY_LIMIT_EXCEEDED]: '메모리 초과',
  [RESULT_CATEGORY.RESULT_OUTPUT_LIMIT_EXCEEDED]: '출력 초과',
  [RESULT_CATEGORY.RESULT_RUNTIME_ERROR]: '런타임 에러',
};

/* state of upload for progress */
const uploadState = { uploading: false };

const multiloader = {
  wrap: null,
  nom: null,
  denom: null,
};
